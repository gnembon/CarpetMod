--- a/net/minecraft/entity/EntityLiving.java
+++ b/net/minecraft/entity/EntityLiving.java
@@ -1,7 +1,10 @@
 package net.minecraft.entity;
 
+import carpet.CarpetSettings;
+import carpet.logging.logHelpers.DamageReporter;
 import com.google.common.collect.Maps;
 import java.util.Arrays;
+import java.util.HashMap;
 import java.util.Map;
 import java.util.Random;
 import java.util.UUID;
@@ -9,6 +12,7 @@
 import net.minecraft.block.BlockAbstractSkull;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.enchantment.EnchantmentHelper;
+import net.minecraft.entity.ai.EntityAIBase;
 import net.minecraft.entity.ai.EntityAITasks;
 import net.minecraft.entity.ai.EntityJumpHelper;
 import net.minecraft.entity.ai.EntityLookHelper;
@@ -75,6 +79,9 @@
     protected PathNavigate navigator;
     protected final EntityAITasks tasks;
     protected final EntityAITasks targetTasks;
+    //[CM scarpet]
+    public final Map<String, EntityAIBase> temporaryTasks = new HashMap<>();
+    //
     private EntityLivingBase attackTarget;
     private final EntitySenses senses;
     private final NonNullList<ItemStack> inventoryHands = NonNullList.withSize(2, ItemStack.EMPTY);
@@ -109,6 +116,12 @@
             this.initEntityAI();
         }
     }
+    
+    //[CM scarpet - access to tasks
+    public EntityAITasks getAI(boolean target)
+    {
+        return target?targetTasks:tasks;
+    }
 
     protected void initEntityAI()
     {
@@ -423,6 +436,11 @@
 
             compound.setTag("Leash", nbttagcompound2);
         }
+        // [CM] Lead fix - Makes sure the leashNBTTag data is preseved
+        else if (CarpetSettings.getBool("leadFix") && leashNBTTag != null)
+        {
+            compound.setTag("Leash", leashNBTTag);
+        }
 
         compound.setBoolean("LeftHanded", this.isLeftHanded());
 
@@ -836,7 +854,7 @@
 
     public boolean isNotColliding(IWorldReaderBase worldIn)
     {
-        return !worldIn.containsAnyLiquid(this.getBoundingBox()) && worldIn.isCollisionBoxesEmpty(this, this.getBoundingBox()) && worldIn.checkNoEntityCollision(this, this.getBoundingBox());
+        return !worldIn.containsAnyLiquid(this.getBoundingBox()) && worldIn.isCollisionBoxesEmpty(this, this.getBoundingBox()) && (CarpetSettings.n_mobSpawningAlgorithm == 112 || worldIn.checkNoEntityCollision(this, this.getBoundingBox()));
     }
 
     @OnlyIn(Dist.CLIENT)
@@ -1447,10 +1465,16 @@
         float f = (float)this.getAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).getValue();
         int i = 0;
 
+        // CM
+        DamageReporter.register_damage_attacker( entityIn, this, f);
+        float ff = f;
+        // end CM
+
         if (entityIn instanceof EntityLivingBase)
         {
             f += EnchantmentHelper.getModifierForCreature(this.getHeldItemMainhand(), ((EntityLivingBase)entityIn).getCreatureAttribute());
             i += EnchantmentHelper.getKnockbackModifier(this);
+            DamageReporter.modify_damage((EntityLivingBase)entityIn, DamageSource.causeMobDamage(this), ff, f, "attacker enchants"); // CM
         }
 
         boolean flag = entityIn.attackEntityFrom(DamageSource.causeMobDamage(this), f);
